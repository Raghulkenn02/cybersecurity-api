import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt

# Load the cleaned data
data = pd.read_csv(r"C:\Users\rakes\OneDrive\Desktop\Raghul\Clg\Dissertation\Datasets\Preprocessed data\preprocessed_phishing_data.csv")

# Assuming the last column is the target variable and the rest are features
X = data.iloc[:, :-1]  # Features
y = data.iloc[:, -1]   # Target variable

# Check for NaN values in features and labels
print(f"NaN values in features: {X.isna().sum()}")
print(f"NaN values in label: {y.isna().sum()}")

# Drop rows with NaN values in features or labels
X = X.dropna()
y = y[X.index]  # Ensure y is aligned with X

# Proceed only if there are valid samples left
if len(X) > 0 and len(y) > 0:
    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    # Build a neural network model
    model = keras.Sequential([
        layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
        layers.Dense(64, activation='relu'),
        layers.Dense(1)  # Assuming a regression task; use softmax for classification
    ])

    # Compile the model
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

    # Train the model
    history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2, verbose=1)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate mean squared error and R² score
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f"\nModel Mean Squared Error: {mse:.2f}")
    print(f"Model R² Score: {r2:.2f}")

    # Custom accuracy function
    def calculate_accuracy(y_true, y_pred, tolerance=0.05):
        """
        Calculate the percentage of predictions that are within a certain tolerance of the actual values.
        """
        # Convert to numpy arrays
        y_true = y_true.to_numpy()
        y_pred = y_pred.flatten()  # Ensure y_pred is a 1D array

        within_tolerance = np.abs(y_true - y_pred) <= (tolerance * np.abs(y_true))
        accuracy = np.mean(within_tolerance) * 100  # Convert to percentage
        return accuracy

    # Calculate accuracy within a 5% tolerance
    accuracy = calculate_accuracy(y_test, y_pred, tolerance=0.05)  # 5% tolerance
    print(f"Model Accuracy (within 5% tolerance): {accuracy:.2f}%")

    # Plotting training history
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'], label='Train Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Loss Over Epochs')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.scatter(y_test, y_pred, alpha=0.7)
    plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')  # Line for perfect prediction
    plt.xlabel('Actual Values')
    plt.ylabel('Predicted Values')
    plt.title('Actual vs Predicted Values')
    plt.grid()
    plt.show()

else:
    print("No valid samples left after handling NaN values. Please check your dataset.")